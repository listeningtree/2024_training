{"name": "test_01_baili[args1]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: DevToolsActivePort file doesn't exist\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00277413+2389011]\n\tOrdinal0 [0x00209F61+1941345]\n\tOrdinal0 [0x000FC658+837208]\n\tOrdinal0 [0x0011BB62+965474]\n\tOrdinal0 [0x0011819C+950684]\n\tOrdinal0 [0x00115C51+941137]\n\tOrdinal0 [0x00148C80+1150080]\n\tOrdinal0 [0x001488DA+1149146]\n\tOrdinal0 [0x00143F66+1130342]\n\tOrdinal0 [0x0011E546+976198]\n\tOrdinal0 [0x0011F456+980054]\n\tGetHandleVerifier [0x00429632+1727522]\n\tGetHandleVerifier [0x004DBA4D+2457661]\n\tGetHandleVerifier [0x0030EB81+569713]\n\tGetHandleVerifier [0x0030DD76+566118]\n\tOrdinal0 [0x00210B2B+1968939]\n\tOrdinal0 [0x00215988+1989000]\n\tOrdinal0 [0x00215A75+1989237]\n\tOrdinal0 [0x0021ECB1+2026673]\n\tBaseThreadInitThunk [0x7612FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77677C5E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77677C2E+238]\n\t(No symbol) [0x00000000]", "trace": "self = <test_UI_research.TestResearch object at 0x00000255B8C05E48>\nargs = {'name': '输入100字符，可以正常输入', 'request': {'headers': {'Content-Type': 'application/json'}, 'method': 'get', 'params': {'w...om/s'}, 'test': '好好学习好好学习好好好好学习好好学习好好好好学习好好学习好好好好学习好好学习好好好好学习好好学习好好好好学习好好学习好好好好学习好好学习好好好好学习好好学习好好好好学习好好学习好好好好学习好好学习好好'}\n\n    @pytest.mark.parametrize('args',YamlUtil(os.getcwd()+'\\\\test_api.yaml').read_yaml())\n    def test_01_baili(self,args):\n>       driver = webdriver.Chrome()\n\ntest_UI_research.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\testDatabase\\venv\\lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:50: in __init__\n    keep_alive,\nD:\\testDatabase\\venv\\lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:64: in __init__\n    options=options,\nD:\\testDatabase\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:206: in __init__\n    self.start_session(capabilities)\nD:\\testDatabase\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:290: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\nD:\\testDatabase\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000255B8C16978>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: DevToolsActivePort file doesn\\'t...jectPath [0x77677C5E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77677C2E+238]\\\\n\\\\t(No symbol) [0x00000000]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: DevToolsActivePort file doesn't exist\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00277413+2389011]\nE       \tOrdinal0 [0x00209F61+1941345]\nE       \tOrdinal0 [0x000FC658+837208]\nE       \tOrdinal0 [0x0011BB62+965474]\nE       \tOrdinal0 [0x0011819C+950684]\nE       \tOrdinal0 [0x00115C51+941137]\nE       \tOrdinal0 [0x00148C80+1150080]\nE       \tOrdinal0 [0x001488DA+1149146]\nE       \tOrdinal0 [0x00143F66+1130342]\nE       \tOrdinal0 [0x0011E546+976198]\nE       \tOrdinal0 [0x0011F456+980054]\nE       \tGetHandleVerifier [0x00429632+1727522]\nE       \tGetHandleVerifier [0x004DBA4D+2457661]\nE       \tGetHandleVerifier [0x0030EB81+569713]\nE       \tGetHandleVerifier [0x0030DD76+566118]\nE       \tOrdinal0 [0x00210B2B+1968939]\nE       \tOrdinal0 [0x00215988+1989000]\nE       \tOrdinal0 [0x00215A75+1989237]\nE       \tOrdinal0 [0x0021ECB1+2026673]\nE       \tBaseThreadInitThunk [0x7612FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77677C5E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77677C2E+238]\nE       \t(No symbol) [0x00000000]\n\nD:\\testDatabase\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "parameters": [{"name": "args", "value": "{'name': '输入100字符，可以正常输入', 'request': {'url': 'https://www.baidu.com/s', 'method': 'get', 'headers': {'Content-Type': 'application/json'}, 'params': {'wd': '好好学习好好学习好好好好学习好好学习好好好好学习好好学习好好好好学习好好学习好好好好学习好好学习好好好好学习好好学习好好好好学习好好学习好好好好学习好好学习好好好好学习好好学习好好好好学习好好学习好好'}}, 'test': '好好学习好好学习好好好好学习好好学习好好好好学习好好学习好好好好学习好好学习好好好好学习好好学习好好好好学习好好学习好好好好学习好好学习好好好好学习好好学习好好好好学习好好学习好好好好学习好好学习好好'}"}], "start": 1719319876978, "stop": 1719319942394, "uuid": "a233b14a-a5ad-41b0-91ff-8a4bc89532e3", "historyId": "9f8fff9a3f58dfc026b36fd6028133e5", "testCaseId": "4e0f777ad7201c104189149dd189df99", "fullName": "testcase.test_UI_research.TestResearch#test_01_baili", "labels": [{"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_UI_research"}, {"name": "subSuite", "value": "TestResearch"}, {"name": "host", "value": "LAPTOP-UB0CHATK"}, {"name": "thread", "value": "27184-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_UI_research"}]}